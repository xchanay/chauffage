{"name":"Chauffage Sejour","type":"com.fibaro.genericDevice","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_181"},"sections":{"items":[{"components":[{"name":"Mode","style":{"weight":"1.2"},"text":"Mode:","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"1","style":{"weight":"0.33"},"text":"AUTO","type":"button","visible":true},{"name":"2","style":{"weight":"0.33"},"text":"MANU","type":"button","visible":true},{"name":"0","style":{"weight":"0.33"},"text":"OFF","type":"button","visible":true}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"4","style":{"weight":"0.33"},"text":"ECO","type":"button","visible":true},{"name":"5","style":{"weight":"0.33"},"text":"RFU","type":"button","visible":false},{"name":"3","style":{"weight":"0.33"},"text":"AWAY","type":"button","visible":true}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"Temp","style":{"weight":"1.2"},"text":"Temperature: ","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"Target","style":{"weight":"1.2"},"text":"Target:","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"10","style":{"weight":"0.25"},"text":"Min","type":"button","visible":true},{"name":"11","style":{"weight":"0.25"},"text":"-","type":"button","visible":true},{"name":"12","style":{"weight":"0.25"},"text":"+","type":"button","visible":true},{"name":"13","style":{"weight":"0.25"},"text":"Max","type":"button","visible":true}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"Duration","style":{"weight":"1.2"},"text":"Duration","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"20","style":{"weight":"0.25"},"text":"- -","type":"button","visible":true},{"name":"21","style":{"weight":"0.25"},"text":"-","type":"button","visible":true},{"name":"22","style":{"weight":"0.25"},"text":"+","type":"button","visible":true},{"name":"23","style":{"weight":"0.25"},"text":"  + +","type":"button","visible":true}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"max":"100","min":"0","name":"slider","style":{"weight":"1.2"},"text":"","type":"slider","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"40","style":{"weight":"1.2"},"text":"Export to All","type":"button","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"Export","style":{"weight":"1.2"},"text":"","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"101","style":{"weight":"0.20"},"text":"RFU","type":"button","visible":false},{"name":"102","style":{"weight":"0.20"},"text":"RFU","type":"button","visible":false},{"name":"103","style":{"weight":"0.20"},"text":"RFU","type":"button","visible":false},{"name":"104","style":{"weight":"0.20"},"text":"RFU","type":"button","visible":false},{"name":"105","style":{"weight":"0.20"},"text":"RFU","type":"button","visible":false}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"RFU","style":{"weight":"1.2"},"text":"","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_181"}}},"uiCallbacks":[{"callback":"sendKey","eventType":"onReleased","name":"1"},{"callback":"sendKey","eventType":"onReleased","name":"2"},{"callback":"sendKey","eventType":"onReleased","name":"0"},{"callback":"sendKey","eventType":"onReleased","name":"4"},{"callback":"","eventType":"onReleased","name":"5"},{"callback":"sendKey","eventType":"onReleased","name":"3"},{"callback":"sendKey","eventType":"onReleased","name":"10"},{"callback":"sendKey","eventType":"onReleased","name":"11"},{"callback":"sendKey","eventType":"onReleased","name":"12"},{"callback":"sendKey","eventType":"onReleased","name":"13"},{"callback":"sendKey","eventType":"onReleased","name":"20"},{"callback":"sendKey","eventType":"onReleased","name":"21"},{"callback":"sendKey","eventType":"onReleased","name":"22"},{"callback":"sendKey","eventType":"onReleased","name":"23"},{"callback":"sendKey","eventType":"onChanged","name":"slider"},{"callback":"sendKey","eventType":"onReleased","name":"40"},{"callback":"sendKey","eventType":"onReleased","name":"101"},{"callback":"sendKey","eventType":"onReleased","name":"102"},{"callback":"sendKey","eventType":"onReleased","name":"103"},{"callback":"sendKey","eventType":"onReleased","name":"104"},{"callback":"sendKey","eventType":"onReleased","name":"105"}],"quickAppVariables":[],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"--[[ Heating Control QuickApp.                      v2 2023/11/21\n\nControls the heating system in a room\n\n]]--\n\n--[[Function:  setDurationString(duration, endTimer, mode)\n\nSet the content of the duration string based on:\n- the timer duration left (in seconds)\n- the timer end time (in seconds in system time)\n- the mode in which the system is (manual or away as there is no duration string for other modes)\n\nCall: DurationString = setDurationString (duration, endTimer, mode) where DurationString is a string.\n\n--]]\n\nfunction setDurationString(duration, endTimer, mode)\n\n\tlocal setDurationStringDebug = false\n\n\tif setDurationStringDebug then\n\t\tself:debug('Function setDurationString.')\n\tend\n\n\tlocal durationString = ' '\n\t\n\tif mode == 'Manual' then\n\t\tdurationString = 'Duration:  '..tostring(math.floor((duration + 59)/60))..' Min'\n\t\t\n\telseif mode == 'Away' then\n\t\tif duration >= 0 then\n\t\t\tdurationString = os.date(\"Away till: %d %b at %Hh\", endTimer)\n\t\telse\n\t\t\tdurationString = 'Duration:  00 Min'\n\t\tend\t\n\t\t\n\tend\n\t\n\tif setDurationStringDebug then\n\t\tself:debug('DurationString = '..durationString)\n\tend\n\treturn durationString\n\t\nend\t-- end of Function setDurationString\n\n\n--[[getNumberOfRooms(HeatingTable)\nThis function checks the number of rooms with a controlled heating system\n\nCall: numberOfRooms = getNumberOfRooms(HeatingTable)\n--]]\n\nfunction getNumberOfRooms(HD)\nlocal numberOfRooms = 0\nlocal room, t = next(HD, nil)\nwhile room do\n\tnumberOfRooms = room\n\troom, t = next(HeatingTable, room)\nend\nreturn (numberOfRooms)\n\t\nend -- of function getNumberOfRooms\n\n\t\n----------------------------------- End of internal functions -------------------------------------\n---------------------------------------------------------------------------------------------------\n\n---------------------------------------------------------------------------------------------------\n------------------------------------ Function onInit  ---------------------------------------------\n---------------------------------------------------------------------------------------------------\n\nfunction QuickApp:onInit()\n\n    local debug = true\n\n\tif debug then\n\t\tself:debug('Function onInit.  '..'device Id = '..self.id)\n    end\n\t\t\n\tself.MODE_STRING_OFF = \t\t'Mode:    OFF'\n\tself.MODE_STRING_AUTO = \t'Mode:    AUTOMATIC'\n\tself.MODE_STRING_MANU = \t'Mode:    MANUAL'\n\tself.MODE_STRING_ECO = \t\t'Mode:    ECONOMY'\n\tself.MODE_STRING_AWAY = \t'Mode:    AWAY'\n\t\n    self.TempEco = 2\t\t--  target temperature decrease except during off-peak hours for electric heating\n\t\t\t\t\t\t\t-- also defined in HeatingManagement\n\n\tlocal HT = fibaro.getGlobalVariable('HEATING_TABLE')\n    local HeatingTable = json.decode(HT)\n\tlocal roomName = fibaro.getRoomNameByDeviceID(self.id)\n\tif debug then\n\t\tself:debug(\"Function onInit. roomName = \"..roomName..'  QAId = '..self.id)\n\tend\n\tlocal room, roomTable = next(HeatingTable, nil)\t\n\twhile room do\n\t\tif roomName == roomTable.RoomName then\n\t\t\tself.Room = room\n\t\t\tif debug then\n\t\t\t\tself:debug('Function onInit ', 'Room number: '..room..'    Room name: '..roomName)\n\t\t\tend\n\t\t\tHeatingTable[room].QAId = self.id\n\t\t\tfibaro.setGlobalVariable('HEATING_TABLE', json.encode(HeatingTable))\n\t\t\tself:updateDisplay()\n\t\t\tbreak\n\t\tend\n\t\troom, roomTable = next(HeatingTable, room)\n\tend\n\tif not room then\t-- roomName not found in HeatingTable\n\t\tself:debug('Function onInit. ', 'No roomName: '..roomName..' in HeatingTable ')\n\tend\t-- self.Room contains the room number in which the device is installed\n\t\n-- check if HeatingTimer scene is running and start it if not\n\tlocal HeatingTimerSceneId = 0\n\tfor _,s in ipairs(api.get(\"/scenes\")) do\n\t\tif s.name == \"Heating_Timer\" then\n\t\t\tHeatingTimerSceneId = s.id\n\t\t\tif s.isRunning then \n\t\t\t\tif debug then\n\t\t\t\t\tself:debug('Function onInit. ', 'Scene '..s.name..' is running')\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif debug then\n\t\t\t\t\tself:debug('Function onInit. ', 'Scene '..s.name..' is not running. Launching it')\n\t\t\t\tend\n\t\t\t\tapi.put('/scenes/'..HeatingTimerSceneId, {enabled = true})\n\t\t\t\tfibaro.scene('execute', {HeatingTimerSceneId})\n\t\t\tend\n\t\tend\n\tend\nend\n\n---------------------------------------------------------------------------------------------------\n------------------------------------ Function updateDisplay  ---------------------------------------------\n---------------------------------------------------------------------------------------------------\n\nfunction QuickApp:updateDisplay()\n\t\t\n\tlocal debug = true\n\n\tlocal TempString, ModeString, TargetString, DurationString = ' '\n\t\n\tif self.Room == 0 then\n\t\tModeString = 'Press any key to initialize'\n\t\tself:updateView(\"Mode\", \"text\", ModeString)\n\t\tif debug then\n\t\t\tself:debug('UpdateDisplay : self.Room = 0')\n\t\tend\n\telse\n\t\tif debug then\n\t\t\tself:debug('UpdateDisplay : self.Room = '..self.Room)\n\t\tend\n\t\tlocal HT = fibaro.getGlobalVariable('HEATING_TABLE')\n\t\tlocal HeatingTable = json.decode(HT)\n\t\tHT = fibaro.getGlobalVariable('HEATING_TRIGGER')\n\t\tlocal HeatingTrigger = json.decode(HT)\n\n\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\tlocal Temp = tonumber (HeatingTable[self.Room].LastTemp)\n\t\t\tTempString = 'Temp:   '..string.format('%.1f', Temp)..' ºC'\n\t\telse\n\t\t\tTempString = 'No thermometer'\n\t\tend\n\n------------------------------------------- Mode: Off ------------------------------------------- \n\t\tif HeatingTable[self.Room].Mode == 'Off' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Off')\n\t\t\tend  \n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_OFF\n\t\t\tTargetString = ' '\n\t\t\tDurationString = ' '\n\t\t\n------------------------------------------- Mode: Auto ------------------------------------------- \n\t\telseif HeatingTable[self.Room].Mode == 'Auto' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Auto')\n\t\t\tend  \n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_AUTO\n\t\t\t\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', HeatingTable[self.Room].TargetAuto)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\t\n\t\t\tDurationString = ' '\n\n----------------------------------------- Mode: Manual ------------------------------------------- \t\t\n\t\telseif HeatingTable[self.Room].Mode == 'Manual' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Manual')\n\t\t\tend \n\t\t\t-- updates the VD UI variables\n\t\t\t\t\t\n\t\t\tif (HeatingTable[self.Room].HeatingType == 'Fire' or HeatingTable[self.Room].HeatingType == 'Fire-Inverter') then\n\t\t\t\tif HeatingTable[self.Room].FlamesManu == FlamesEco then\n\t\t\t\t\tTargetString = 'Flames:   '..'Eco'\n\t\t\t\telse\n\t\t\t\t\tTargetString = 'Flames:   '..tostring(HeatingTable[self.Room].FlamesManu)\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\t\n\t\t\tDateTime = os.time()\n\t\t\t\n\t\t\tif DateTime >= HeatingTable[self.Room].EndTimer then\n\t\t\t\t-- Timer elapsed. Switching back to PreviousMode mode\n\t\t\t\tif debug then\n\t\t\t\t\tself:debug('Mode Manu. Timer elapsed. Switching back to Previous Mode: '..HeatingTable[self.Room].PreviousMode)\n\t\t\t\tend\n\n\t\t\t\tDurationString = ' '\n\t\t\t\tif HeatingTable[self.Room].PreviousMode == 'Auto' then\n\t\t\t\t\tHeatingTrigger[self.Room].Mode = 'Auto'\n\t\t\t\t\tModeString = self.MODE_STRING_AUTO\n\t\t\t\telse\n\t\t\t\t\tHeatingTrigger[self.Room].Mode = 'Off'\n\t\t\t\t\tModeString = MODE_STRING_OFF\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tHeatingTrigger[self.Room].Mode = HeatingTable[self.Room].PreviousMode\n\t\t\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n\t--[[\n\t\t\t\tif HeatingTable[self.Room].VoiceActivation then\n\t\t\t\t\tfibaro.call (HeatingTable[self.Room].VoiceActivationId, 'turnOff')\t-- turn off the VoiceActivation switch to be sure that it will be\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- off next time it is used\n\t\t\t\tend\n\t--]]\n\t\t\telse\n\t\t\t\t-- Timer not elapsed. Refresh timer on display\n\t\t\t\tif debug then self:debug('Mode Manu. Timer not elapsed. Timer = '..tostring(HeatingTable[self.Room].EndTimer-DateTime))\n\t\t\t\tend\n\t\t\t\tModeString = self.MODE_STRING_MANU\n\t\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - DateTime, HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\t\t\tend\n\n------------------------------------------- Mode: Away ------------------------------------------- \t\t\t\n\t\telseif HeatingTable[self.Room].Mode == 'Away' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Away')\n\t\t\tend \n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_AWAY\n\t\t\tif HeatingTable[self.Room].Thermometer then \n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', HeatingTable[self.Room].TargetAway)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = 'Hors Gel'\n\t\t\tend\n\t\t\t\n\t\t\tDateTime = os.time()\n\t\t\t\n\t\t\tif DateTime >= HeatingTable[self.Room].EndTimer then\n\t\t\t\t-- Timer elapsed. Switching back to Auto mode\n\t\t\t\tif debug then\n\t\t\t\t\tself:debug('Mode Away. Timer elapsed. Switching back to Auto')\n\t\t\t\tend\n\t\t\t\tModeString = self.MODE_STRING_AUTO\n\t\t\t\tDurationString = ' '\n\t\t\t\tHeatingTrigger[self.Room].Mode = 'Auto'\n\t\t\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n\t\t\telse\n\t\t\t\t-- Timer not elapsed. Refresh timer on display\n\t\t\t\tif debug then self:debug('Mode Away. Timer not elapsed. Timer = '..tostring(HeatingTable[self.Room].EndTimer-DateTime))\n\t\t\t\tend\n\t\t\t\tModeString = 'Mode:      Away'\n\t\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - DateTime, HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\t\t\tend\n\n-------------------------------------------- Mode: Eco ------------------------------------------- \n\t\telseif HeatingTable[self.Room].Mode == 'Eco' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Eco')\n\t\t\tend  \n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_ECO\n\t\t\t\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', HeatingTable[self.Room].TargetAuto - self.TempEco)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\t\n\t\t\tDurationString = ' '\t\n\t\tend\n\n\n\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\tTempString = 'Temperature:   '..HeatingTable[self.Room].LastTemp..' °C'\n\t\telse\n\t\t\tTempString = ' '\n\t\tend\n\t\t\n\t\tself:updateView(\"Temp\", \"text\", TempString)\n\t\tself:updateView(\"Mode\", \"text\", ModeString)\n\t\tself:updateView(\"Target\", \"text\", TargetString)\n\t\tself:updateView(\"Duration\", \"text\", DurationString)\n\tend\n\nend --- end function\n\n\n\n---------------------------------------------------------------------------------------------------\n------------------------------------ Function sendKey  ---------------------------------------------\n---------------------------------------------------------------------------------------------------\n\nfunction QuickApp:sendKey(key)\n\n\n\n    local debug = true\n\t\n\tlocal FlamesMin = 0\n\tlocal FlamesMax = 8\n\tlocal FlamesEco = 9\n\tlocal Step = 0.5\t\t\t\t\t-- increment step of target temperature\n\tlocal DurationManualStep = 10\t\t-- low increment step in minutes in Manual mode with a FirePlace in the room\n\tlocal DurationAwayStep = 60\t\t\t-- low increment step in minutes in Away mode and in Manual mode if Convertor only\n\tlocal DurationManualHighStep = 30\t-- high increment step in minutes in Manual mode with a FirePlace in the room\n\tlocal DurationAwayHighStep = 24*60\t-- high increment step in minutes in Away mode and in Manual mode if Convertor only\n\tlocal Step = 0.5\t\t\t\t\t-- increment step of target temperature\n\tlocal TempTargetMax = 26\n\tlocal TempTargetAwayMax = 20\n\tlocal TempTargetMin = 10\n\tlocal TempTargetAwayMin = 5\n\tlocal TempTargetDefault = 18\n\tlocal TempTargetAwayDefault = 12\n\tlocal TempEco = 2\t\t\t\t\t-- Temperature decrease of TempTarget when in Eco mode\n\t\n\tlocal ModeString, TargetString, DurationString, TempString = ''\n\tlocal DateTime = 0\n\t\n\tif debug then\n\t\tself:debug(\"Function sendKey. Key = \"..json.encode(key))\n\t\tself:debug(\"Function sendKey. DeviceID = \"..key.deviceId)\n\tend\n\t\n-- check if HeatingTimer scene is running and start it if not\n\tlocal HeatingTimerSceneId = 0\n\tfor _,s in ipairs(api.get(\"/scenes\")) do\n\t\tif s.name == \"Heating_Timer\" then\n\t\t\tHeatingTimerSceneId = s.id\n\t\t\tif s.isRunning then \n\t\t\t\tif debug then\n\t\t\t\t\tself:debug('Function onInit. ', 'Scene '..s.name..' is running')\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif debug then\n\t\t\t\t\tself:debug('Function onInit. ', 'Scene '..s.name..' is not running. Launching it')\n\t\t\t\tend\n\t\t\t\tapi.put('/scenes/'..HeatingTimerSceneId, {enabled = true})\n\t\t\t\tfibaro.scene('execute', {HeatingTimerSceneId})\n\t\t\tend\n\t\tend\n\tend\n\t\n    local HT = fibaro.getGlobalVariable('HEATING_TABLE')\n    local HeatingTable = json.decode(HT)\n    HT = fibaro.getGlobalVariable('HEATING_TRIGGER')\n    local HeatingTrigger = json.decode(HT)\n    if debug then\n        self:debug('self.Room = '..self.Room)\n    end\n\t\n    if self.Room == 0 then\t-- first key pressed: need to find out room number\n        \n        local roomName = fibaro.getRoomNameByDeviceID(key.deviceId)\n        if debug then\n            self:debug(\"Function sendKey. roomName = \"..roomName..'  QAId = '..key.deviceId)\n        end\n\t\tlocal room, roomTable = next(HeatingTable, nil)\t\n\t\tif debug then\n\t\t\tself:debug('Function sendKey ', 'Room name: '..roomName)\n\t\tend\n\t\twhile room do\n\t\t\tif roomName == roomTable.RoomName then\n\t\t\t\tself.Room = room\n\t\t\t\tif debug then\n\t\t\t\t\tself:debug('Function sendKey ', 'Room number: '..room..'    Room name: '..roomName)\n\t\t\t\tend\n\t\t\t\tHeatingTable[room].QAId = key.deviceId\n\t\t\t\tfibaro.setGlobalVariable('HEATING_TABLE', json.encode(HeatingTable))\n\t\t\t\tbreak\n\t\t\tend\n\t\t\troom, roomTable = next(test, room)\n\t\tend\n\t\tif not room then\t-- roomName not found in HeatingTable\n\t\t\tself:debug('sendKey', 'No roomName: '..roomName..' in HeatingTable ')\n\t\tend\n\tend\t-- self.Room contains the room number in which the device is installed\n\t\n----------------------------------------------Off---------------------------------------------\n\tif key.elementName == '0' then\n\t\tif true then \n\t\t\tself:debug(\"Function sendKey. Key = 0\")\n\t\t\tself:debug('Off mode requested')\n\t\tend\n\n\t\t-- updates the VD UI variables\n\t\tModeString = self.MODE_STRING_OFF\n\t\tTargetString = ' '\n\t\tDurationString = ' '\n\t\t\n\t--\tself:updateView(\"Mode\", \"text\", ModeString)\n\n\t\t-- updates HeatingTable structure\n\t\tHeatingTrigger[self.Room].Mode='Off'\n\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n\n----------------------------------------------Auto---------------------------------------------\n\n\telseif key.elementName == '1' then\n\t\tif debug then\n            self:debug(\"Function sendKey. Key = 1\")\n\t\t    self:debug('Automatic mode requested')\n        end\n\t\t\n\t\t-- updates the VD UI variables\n\t\tModeString = self.MODE_STRING_AUTO\n\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\tTargetString = 'Target:   '..string.format('%.1f', HeatingTable[self.Room].TargetAuto)..' ºC'\n\t\telse\n\t\t\tTargetString = ' '\n\t\tend\n\t\tDurationString = ' '\n        if debug then\n            self:debug('Function sendKey ', 'TargetString = '..TargetString)\n        end\n\t\t-- updates HeatingTable structure\n\t\tHeatingTrigger[self.Room].Mode = 'Auto'\n\t\t\n\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n\t\t\n\t-----------------------------------------------Manual---------------------------------------------\n\telseif key.elementName == '2' then\n\t\tif debug then\n\t\t\tself:debug(\"Function sendKey. Key = 2\")\n\t\t    self:debug('Manual mode requested')\n\t\tend\n\t \n\t\tDateTime = os.time()\n\t\tif HeatingTable[self.Room].Mode ~= 'Manual' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Switching Mode to Manual')\n\t\t\tend\n\t\t\tEndDateTime = DateTime + DurationManualStep\t* 60 -- initializes duration if previous mode was not manual\n\t\telse\n\t\t\tEndDateTime = HeatingTable[self.Room].EndTimer\t\t-- recovers the remaining value of the timer if already in manual mode\n\t\tend\n\n\t\t-- updates the VD UI variables\n        if debug then\n\t\t\t\tself:debug('Manual: updates the VD UI variables')\n\t\tend\n\t\tModeString = self.MODE_STRING_MANU\n\t\tif (HeatingTable[self.Room].HeatingType == 'Fire' or HeatingTable[self.Room].HeatingType == 'Fire-Inverter') then\n\t\t\tif tonumber(HeatingTable[self.Room].FlamesManu) == FlamesEco then\n\t\t\t\tFlamesString = 'Eco'\n\t\t\telse\n\t\t\t\tFlamesString = tostring(HeatingTable[self.Room].FlamesManu)\n\t\t\tend\n\t\t\tTargetString = 'Flames:   '..FlamesString\n\t\telse\t\n\t\t\tTargetString = ' '\n\t\tend\n        if debug then\n\t\t\t\tself:debug('Manual: calling setDurationString')\n\t\tend\n\t\tDurationString = setDurationString(EndDateTime-DateTime, EndDateTime, 'Manual')\n\n\t\t-- updates HeatingTable structure\n\t\tHeatingTrigger[self.Room].Mode='Manual'\n\t\tHeatingTable[self.Room].EndTimer = EndDateTime\n\t\t\n        if debug then\n\t\t\tself:debug('Manual: setting global variables')\n\t\tend\n\t\tfibaro.setGlobalVariable('HEATING_TABLE', json.encode(HeatingTable))\n\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n        if debug then\n\t\t\tself:debug('Manual: global variables set')\n\t\tend\n\n----------------------------------------------Away---------------------------------------------\n\telseif key.elementName == '3' then\n\t\tif debug then\n\t\t\tself:debug('Away mode requested')\n\t\tend\n\n\t\tDateTime = os.time()\n\t\tif (HeatingTable[self.Room].Mode ~= 'Away') then\n\t\t\tif debug then\n\t\t\t\tself:debug('Switching Mode to Away')\n\t\t\tend\n\t\t\tEndDateTime = DateTime + DurationAwayStep * 60\t\t-- initializes remaining duration if not previously in away mode\n\t\telse\n\t\t\tEndDateTime = HeatingTable[self.Room].EndTimer\t\t-- recovers remaining timer if already in away mode\n\t\tend\n\t\t\n\t\t-- updates the VD UI variables\n\t\tModeString = self.MODE_STRING_AWAY\n\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\tTargetString = 'Target:   '..string.format('%.1f', HeatingTable[self.Room].TargetAway)..' ºC'\n\t\telse\n\t\t\tTargetString = 'Hors gel'\n\t\tend\n\t\tDurationString = setDurationString(EndDateTime-DateTime, EndDateTime, 'Away')\n\n\t\t-- updates HeatingTable structure\n\t\tHeatingTrigger[self.Room].Mode='Away'\n\t\tHeatingTable[self.Room].EndTimer = EndDateTime\n\t\t\n\t\tfibaro.setGlobalVariable('HEATING_TABLE', json.encode(HeatingTable))\n\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n\t\t\n-------------------------------------------Mode Eco -------------------------------------------\t\n\telseif key.elementName == '4' then\n\t\tif debug then\n\t\t\tself:debug('Eco mode requested')\n\t\tend\n\n\t\t-- updates the VD UI variables\n\t\tModeString = self.MODE_STRING_ECO\n\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\tTargetString = 'Target:   '..string.format('%.1f', HeatingTable[self.Room].TargetAuto - self.TempEco)..' ºC'\n\t\telse\n\t\t\tTargetString = ' '\n\t\tend\n\t\tDurationString = ' '\n\n\t\t-- updates HeatingTable structure\n\t\tHeatingTrigger[self.Room].Mode = 'Eco'\n\t\t\n\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n\t\t\n--------------------------------------------Temp Min -------------------------------------------\n\telseif key.elementName == '10' then\n\t\tif debug then\n\t\t\tself:debug('Temp Min requested')\n\t\tend\n\n\t\tif HeatingTable[self.Room].Mode == 'Auto' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Decreasing Auto Target temperature to Min')\n\t\t\tend\n\t\t\t\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_AUTO\n\t\t\tif HeatingTable[self.Room].Thermometer then\t\n\t\t\t\tTempTarget = TempTargetMin\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', TempTarget)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\tDurationString = ' '\n\n\t\t-- updates HeatingTable structure\n\t\t\tHeatingTrigger[self.Room].TargetAuto = TempTarget\n\n\n\t\telseif HeatingTable[self.Room].Mode == 'Manual' then\n\t\t\tif (debug) then self:debug('Decreasing flames level to Min')\n\t\t\tend\n\t\t\t\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_MANU\n\t\t\tif (HeatingTable[self.Room].HeatingType=='Fire' or HeatingTable[self.Room].HeatingType=='Fire-Inverter') then\n\t\t\t\tFlames = FlamesMin\n\t\t\t\tTargetString = 'Flames:   '..tostring(Flames)\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - os.time(), HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\n\t\t\t-- updates HeatingTable structure\n\t\t\tHeatingTrigger[self.Room].FlamesManu = Flames\n\n\n\t\telseif HeatingTable[self.Room].Mode == 'Away' then\n\t\t\tif (debug) then self:debug('Decreasing Away Target temperature to Min')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_AWAY\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTempTarget = TempTargetAwayMin\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', TempTarget)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = 'Hors gel'\n\t\t\tend\n\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - os.time(), HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\n\t\t\t-- updates HeatingTable structure\n\t\t\tHeatingTable[self.Room].TargetAway = TempTarget\n\n\n\t\telseif (HeatingTable[self.Room].Mode == 'Off') then\n\t\t\tif (debug) then self:debug('Mode Off: nothing to do')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_OFF\n\t\t\tTargetString = ' '\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\n\t\tend\n\t\t\n\t\tfibaro.setGlobalVariable('HEATING_TABLE', json.encode(HeatingTable))\n\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n\n\n-------------------------------------------Temp Down---------------------------------------------\n\telseif key.elementName == '11' then\n\t\tif debug then\n\t\t\tself:debug('Temp down requested')\n\t\tend\n\n\t\tif HeatingTable[self.Room].Mode == 'Auto' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Decreasing Auto Target temperature')\n\t\t\tend\n\t\t\t\n\t\t\t\t\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_AUTO\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTempTarget =  HeatingTable[self.Room].TargetAuto - Step\t-- computes new target temperatureTempTarget = TempTargetAwayMin\n\t\t\t\tif ( TempTarget < TempTargetMin) then TempTarget = TempTargetMin\n\t\t\t\tend\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', TempTarget)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\tDurationString = ' '\n\n\t\t\t-- updates HeatingTable structure\n\t\t\tHeatingTrigger[self.Room].TargetAuto = TempTarget\n\n\n\t\telseif HeatingTable[self.Room].Mode == 'Manual' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Decreasing flames level')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_MANU\n\t\t\tif (HeatingTable[self.Room].HeatingType=='Fire' or HeatingTable[self.Room].HeatingType=='Fire-Inverter') then\n\t\t\t\tFlames =  HeatingTable[self.Room].FlamesManu - 1\t-- computes new flames level as in \"Manu\" mode, there is no temp target\n\t\t\t\tif Flames < FlamesMin then\n\t\t\t\t\tFlames = FlamesMin\n\t\t\t\tend\n\t\t\t\tif Flames == FlamesEco then\n\t\t\t\t\tFlamesString = 'Eco'\n\t\t\t\telse\n\t\t\t\t\tFlamesString = tostring(Flames)\n\t\t\t\tend\n\t\t\t\tTargetString = 'Flames:   '..FlamesString\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - os.time(), HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\n\t\t\t-- updates HeatingTable structure\n\t\t\tHeatingTrigger[self.Room].FlamesManu = Flames\n\n\n\t\telseif HeatingTable[self.Room].Mode == 'Away' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Decreasing Away Target temperature')\n\t\t\tend\n\t\t\t\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_AWAY\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTempTarget =  HeatingTable[self.Room].TargetAway - Step\n\t\t\t\tif TempTarget < TempTargetAwayMin then\n\t\t\t\t\tTempTarget = TempTargetAwayMin\n\t\t\t\tend\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', TempTarget)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = 'Hors gel'\n\t\t\tend\n\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - os.time(), HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\n\t\t\t-- updates HeatingTable structure\n\t\t\tHeatingTable[self.Room].TargetAway = TempTarget\n\t\t\t\n\n\t\telseif HeatingTable[self.Room].Mode == 'Off' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Off: nothing to do')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_OFF\n\t\t\tTargetString = ' '\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\t\tend\n\t\t\n\t\tfibaro.setGlobalVariable('HEATING_TABLE', json.encode(HeatingTable))\n\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n\n--------------------------------------------Temp Up---------------------------------------------\n\telseif key.elementName == '12' then\n\t\tif debug then\n\t\t\tself:debug('Temp up requested')\n\t\tend\n\n\t\tif HeatingTable[self.Room].Mode == 'Auto' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Increasing Auto Target temperature')\n\t\t\tend\n\t\t\t\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_AUTO\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTempTarget =  HeatingTable[self.Room].TargetAuto + Step\n\t\t\t\tif TempTarget > TempTargetMax then\n\t\t\t\t\tTempTarget = TempTargetMax\n\t\t\t\tend\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', TempTarget)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\tDurationString = ' '\n\n\t-- updates HeatingTable structure\n\t\t\tHeatingTrigger[self.Room].TargetAuto = TempTarget\n\n\n\t\telseif HeatingTable[self.Room].Mode == 'Manual' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Increasing flames level')\n\t\t\tend\n\t\t\t\n\t\t\tModeString = self.MODE_STRING_MANU\t\n\t\t\tif (HeatingTable[self.Room].HeatingType=='Fire' or HeatingTable[self.Room].HeatingType=='Fire-Inverter') then\n\t\t\t\tFlames = HeatingTable[self.Room].FlamesManu + 1\n\t\t\t\tif Flames > FlamesEco then\n\t\t\t\t\tFlames = FlamesEco\n\t\t\t\tend\n\t\t\t\tif Flames == FlamesEco then\n\t\t\t\t\tFlamesString = 'Eco'\n\t\t\t\telse\n\t\t\t\t\tFlamesString = tostring(Flames)\n\t\t\t\tend\n\t\t\t\tTargetString = 'Flames:   '..FlamesString\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - os.time(), HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\n\t\t\t-- updates HeatingTable structure\n\t\t\tHeatingTrigger[self.Room].FlamesManu = Flames\n\n\n\t\telseif HeatingTable[self.Room].Mode == 'Away' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Increasing Away Target temperature')\n\t\t\tend\n\n\t\t\tModeString = self.MODE_STRING_AWAY\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTempTarget =  HeatingTable[self.Room].TargetAway + Step\n\t\t\t\tif TempTarget > TempTargetAwayMax then\n\t\t\t\t\tTempTarget = TempTargetAwayMax\n\t\t\t\tend\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', TempTarget)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = 'Hors gel'\n\t\t\tend\n\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - os.time(), HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\n\t\t\t-- updates HeatingTable structure\n\t\t\tHeatingTable[self.Room].TargetAway = TempTarget\n\n\n\t\telseif HeatingTable[self.Room].Mode == 'Off' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Off: nothing to do')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_OFF\n\t\t\tTargetString = ' '\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\t\tend\n\t\t\n\t\tfibaro.setGlobalVariable('HEATING_TABLE', json.encode(HeatingTable))\n\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n\n--------------------------------------------Temp Max---------------------------------------------\n\telseif key.elementName == '13' then\n\t\tif debug then\n\t\t\tself:debug('Temp max requested')\n\t\tend\n\t\t\n\t\t\tif HeatingTable[self.Room].Mode == 'Auto' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Increasing Auto Target temperature to Max')\n\t\t\tend\n\t\t\t\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_AUTO\n\t\t\tif HeatingTable[self.Room].Thermometer then\t\n\t\t\t\tTempTarget = TempTargetMax\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', TempTarget)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\tDurationString = ' '\n\n\t\t-- updates HeatingTable structure\n\t\t\tHeatingTrigger[self.Room].TargetAuto = TempTarget\n\n\n\t\telseif HeatingTable[self.Room].Mode == 'Manual' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Increasing flames level to Max')\n\t\t\tend\n\t\t\t\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_MANU\n\t\t\tif (HeatingTable[self.Room].HeatingType=='Fire' or HeatingTable[self.Room].HeatingType=='Fire-Inverter') then\n\t\t\t\tFlames = FlamesMax\n\t\t\t\tTargetString = 'Flames:   '..tostring(Flames)\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - os.time(), HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\n\t\t\t-- updates HeatingTable structure\n\t\t\t\n\t\t\tHeatingTrigger[self.Room].FlamesManu = Flames\n\n\n\t\telseif HeatingTable[self.Room].Mode == 'Away' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Increasing Away Target temperature to Max')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_AWAY\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTempTarget = TempTargetAwayMax\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', TempTarget)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = 'Hors gel'\n\t\t\tend\n\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - os.time(), HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\t\t\t\n\t\t\t-- updates HeatingTable[self.Room] structure\n\t\t\tHeatingTable[self.Room].TargetAway = TempTarget\n\n\n\t\telseif HeatingTable[self.Room].Mode == 'Off' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Off: nothing to do')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_OFF\n\t\t\tTargetString = ' '\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\n\t\tend\n\t\t\n\t\tfibaro.setGlobalVariable('HEATING_TABLE', json.encode(HeatingTable))\n\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n\n\n------------------------------------Duration Fast Down---------------------------------------------\n\telseif key.elementName == '20' then\n\t\tif debug then\n\t\t\tself:debug('Duration fast down requested')\n\t\tend\n\n\t\tif HeatingTable[self.Room].Mode == 'Auto' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Auto: nothing to do')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_AUTO\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', HeatingTable[self.Room].TargetAuto)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\n\t\telseif HeatingTable[self.Room].Mode == 'Manual' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Decreasing Manual Duration fast')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_MANU\n\t\t\t\n\t\t\tif (HeatingTable[self.Room].HeatingType=='Fire' or HeatingTable[self.Room].HeatingType=='Fire-Inverter') then\n\t\t\t\tTargetString = 'Flames:   '..tostring(HeatingTable[self.Room].FlamesManu)\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\n\t\t\tDateTime = os.time()\n\t\t\tDuration =  math.floor((HeatingTable[self.Room].EndTimer - DateTime)/60)\t-- duration left rounded to the closest minute\n\t\t\tif Duration % DurationManualHighStep == 0 then\n\t\t\t\t\tDuration =  Duration - DurationManualHighStep\n\t\t\telse\n\t\t\t\tDuration = Duration - (Duration % DurationManualHighStep)\n\t\t\tend\n\n\t\t\tif Duration <= 0 then \t-- end of Manual mode.\n\t\t\t\tDuration = 0\n\t\t\tend\t\n\t\t\t\n\t\t\tDurationString = setDurationString(Duration * 60, DateTime + (Duration * 60), HeatingTable[self.Room].Mode)\n\n\t\t\t-- updates HeatingTable structure\n\t\t\tHeatingTable[self.Room].EndTimer = DateTime + (Duration * 60)\n\n\n\t\telseif HeatingTable[self.Room].Mode == 'Away' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Decreasing Away Duration fast')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\t\n\t\t\tModeString = MODE_STRING_AWAY\n\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTempTarget = HeatingTable[self.Room].TargetAway\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', TempTarget)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = 'Hors gel'\n\t\t\tend\n\n\t\t\tDateTime = os.time()\n\t\t\t\n\t\t\tif HeatingTable[self.Room].EndTimer % (DurationAwayStep * 60) == 0 then\n\t\t\t\tHeatingTable[self.Room].EndTimer = HeatingTable[self.Room].EndTimer - (DurationAwayHighStep * 60)\n\t\t\telse\n\t\t\t\tHeatingTable[self.Room].EndTimer = HeatingTable[self.Room].EndTimer - (HeatingTable[self.Room].EndTimer % (DurationAwayStep * 60))\n\t\t\tend\n\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - DateTime, HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\n\t\telseif HeatingTable[self.Room].Mode == 'Off' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Off: nothing to do')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_OFF\n\t\t\tTargetString = ' '\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\n\t\tend\n\t\t\n\t\tfibaro.setGlobalVariable('HEATING_TABLE', json.encode(HeatingTable))\n\n-------------------------------------Duration Down---------------------------------------------\n\telseif key.elementName == '21' then\n\t\tif debug then\n\t\t\tself:debug('Duration down requested')\n\t\tend\n\n\t\tif HeatingTable[self.Room].Mode == 'Auto' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Auto: nothing to do')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_AUTO\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', HeatingTable[self.Room].TargetAuto)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\n\t\telseif HeatingTable[self.Room].Mode == 'Manual' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Decreasing Manual Duration')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_MANU\n\t\t\tif (HeatingTable[self.Room].HeatingType == 'Fire' or HeatingTable[self.Room].HeatingType == 'Fire-Inverter') then\n\t\t\t\tTargetString = 'Flames:   '..tostring(HeatingTable[self.Room].FlamesManu)\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\n\t\t\tDateTime = os.time()\n\t\t\tDuration =  math.floor((HeatingTable[self.Room].EndTimer - DateTime)/60)\t-- duration left rounded to the closest minute\n\t\t\tif Duration % DurationManualStep == 0 then\n\t\t\t\t\tDuration =  Duration - DurationManualStep\n\t\t\telse\n\t\t\t\tDuration = Duration - (Duration % DurationManualStep)\n\t\t\tend\n\n\t\t\tif Duration <= 0 then\t\t-- end of Manual mode.\n\t\t\t\tDuration = 0\n\t\t\tend\n\t\t\tDurationString = setDurationString(Duration * 60, DateTime + (Duration * 60), HeatingTable[self.Room].Mode)\n\n\t\t\t-- updates HeatingTable structure\n\t\t\tHeatingTable[self.Room].EndTimer = DateTime + (Duration * 60)\n\n\t\telseif HeatingTable[self.Room].Mode == 'Away' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Decreasing Away Duration')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_AWAY\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTempTarget = HeatingTable[self.Room].TargetAway\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', TempTarget)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = 'Hors gel'\n\t\t\tend\n\n\t\t\tDateTime = os.time()\n\n\t\t\tif HeatingTable[self.Room].EndTimer % (DurationAwayStep * 60) == 0 then\n\t\t\t\tHeatingTable[self.Room].EndTimer = HeatingTable[self.Room].EndTimer - (DurationAwayStep * 60)\n\t\t\telse\n\t\t\t\tHeatingTable[self.Room].EndTimer = HeatingTable[self.Room].EndTimer - (HeatingTable[self.Room].EndTimer % (DurationAwayStep * 60))\n\t\t\tend\n\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - DateTime, HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\n\t\telseif HeatingTable[self.Room].Mode == 'Off' then\n\t\t\tif debug then self:debug('Mode Off: nothing to do')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_OFF\n\t\t\tTargetString = ' '\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\n\t\tend\n\t\t\n\t\tfibaro.setGlobalVariable('HEATING_TABLE', json.encode(HeatingTable))\n\n-----------------------------------------Duration Up---------------------------------------------\n\telseif key.elementName == '22' then\n\t\tif debug then\n\t\t\tself:debug('Duration up requested')\n\t\tend\n\n\t\tif HeatingTable[self.Room].Mode == 'Auto' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Auto: nothing to do')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_AUTO\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', HeatingTable[self.Room].TargetAuto)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\n\t\telseif HeatingTable[self.Room].Mode == 'Manual' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Increasing Manual Duration')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_MANU\n\t\t\t\n\t\t\tif (HeatingTable[self.Room].HeatingType=='Fire' or HeatingTable[self.Room].HeatingType=='Fire-Inverter') then\n\t\t\t\tTargetString = 'Flames:   '..tostring(HeatingTable[self.Room].FlamesManu)\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\t\n\t\t\tDateTime = os.time()\n\t\t\tDuration =  math.floor(((HeatingTable[self.Room].EndTimer - DateTime)/60) + 0.5)\t-- duration left rounded to the closest minute\n\t\t\tDuration = Duration + DurationManualStep \n\t\t\tDuration = Duration - (Duration % DurationManualStep)\t-- round down the remaining duration to a multiple of the increasing step\n\t\t\tDurationString = setDurationString(Duration * 60, DateTime + (Duration * 60), HeatingTable[self.Room].Mode)\n\n\t\t\t-- updates HeatingTable structure\n\t\t\tHeatingTable[self.Room].EndTimer = DateTime + (Duration * 60)\n\n\n\t\telseif HeatingTable[self.Room].Mode == 'Away' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Increasing Away Duration')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_AWAY\n\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTempTarget = HeatingTable[self.Room].TargetAway\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', TempTarget)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = 'Hors gel'\n\t\t\tend\n\n\t\t\tDateTime = os.time()\n\t\t\t\n\t\t\tHeatingTable[self.Room].EndTimer = HeatingTable[self.Room].EndTimer + (DurationAwayStep * 60)\n\t\t\tHeatingTable[self.Room].EndTimer = HeatingTable[self.Room].EndTimer - (HeatingTable[self.Room].EndTimer % (DurationAwayStep * 60))\n\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - DateTime, HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\n\t\telseif HeatingTable[self.Room].Mode == 'Off' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Off: nothing to do')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_OFF\n\t\t\tTargetString = ' '\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\n\t\tend\n\t\t\n\t\tfibaro.setGlobalVariable('HEATING_TABLE', json.encode(HeatingTable))\n\t\t\n--------------------------------------Duration Fast Up---------------------------------------------\n\telseif key.elementName == '23' then\n\t\tif debug then\n\t\t\tself:debug('Duration fast up requested')\n\t\tend\t\n\n\t\tif HeatingTable[self.Room].Mode == 'Auto' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Auto: nothing to do')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_AUTO\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', HeatingTable[self.Room].TargetAuto)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\n\t\telseif HeatingTable[self.Room].Mode == 'Manual' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Increasing Manual Duration fast')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_MANU\n\t\t\t\n\t\t\tif (HeatingTable[self.Room].HeatingType=='Fire' or HeatingTable[self.Room].HeatingType=='Fire-Inverter') then\n\t\t\t\tTargetString = 'Flames:   '..tostring(HeatingTable[self.Room].FlamesManu)\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\n\t\t\tDateTime = os.time()\n\t\t\tDuration =  math.floor(((HeatingTable[self.Room].EndTimer - DateTime)/60) + 0.5)\t-- duration left rounded to the closest minute\n\t\t\tDuration = Duration + DurationManualHighStep \n\t\t\tDuration = Duration - (Duration % DurationManualHighStep)\t-- round down the remaining duration to a multiple of the increasing step\n\t\t\tDurationString = setDurationString(Duration * 60, DateTime + (Duration * 60), HeatingTable[self.Room].Mode)\n\n\t\t\t-- updates HeatingTable structure\n\t\t\tHeatingTable[self.Room].EndTimer = DateTime + (Duration * 60)\n\n\n\t\telseif HeatingTable[self.Room].Mode == 'Away' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Increasing Away Duration fast')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_AWAY\n\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTempTarget = HeatingTable[self.Room].TargetAway\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', TempTarget)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = 'Hors gel'\n\t\t\tend\n\n\t\t\tDateTime = os.time()\n\t\t\t\n\t\t\tHeatingTable[self.Room].EndTimer = HeatingTable[self.Room].EndTimer + (DurationAwayHighStep * 60)\n\t\t\tHeatingTable[self.Room].EndTimer = HeatingTable[self.Room].EndTimer - (HeatingTable[self.Room].EndTimer % (DurationAwayStep * 60))\n\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - DateTime, HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\n\t\telseif HeatingTable[self.Room].Mode == 'Off' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Off: nothing to do')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_OFF\n\t\t\tTargetString = ' '\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\n\t\tend\n\t\t\n\t\tfibaro.setGlobalVariable('HEATING_TABLE', json.encode(HeatingTable))\n\t\t\n-------------------------------------- Export to all ---------------------------------------------\n\telseif key.elementName == '40' then\n\t\tif debug then\n\t\t\tself:debug('Export to all requested')\n\t\tend\n\n\t\tif HeatingTable[self.Room].Mode == 'Auto' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Auto: switching all systems in Auto mode')\n\t\t\tend\n\n\t\t\tfor room = 1, getNumberOfRooms(HeatingTable) do\n\t\t\t\tif room ~= self.Room then\n\t\t\t\t\tif debug then\n\t\t\t\t\t\tself:debug('Switching room '..room..' to Auto')\n\t\t\t\t\tend\n\t\t\t\t\tself:updateView(\"Export\", \"text\", 'Exporting Auto mode to room '..room)\n\t\t\t\t\tHeatingTrigger[room].Mode = 'Auto'\n\t\t\t\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n\t\t\t\t\tfibaro.sleep(1*1000)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tself:updateView(\"Export\", \"text\", ' ')\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_AUTO\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', HeatingTable[self.Room].TargetAuto)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\n\t\telseif HeatingTable[self.Room].Mode == 'Manual' then\n\t\t\tif debug then self:debug('Mode manual. Nothing to do')\n\t\t\tend\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_MANU\n\t\t\t\n\t\t\tif (HeatingTable[self.Room].HeatingType=='Fire' or HeatingTable[self.Room].HeatingType=='Fire-Inverter') then\n\t\t\t\tTargetString = 'Flames:   '..tostring(HeatingTable[self.Room].Flames)\n\t\t\telse\n\t\t\t\tTargetString = ' '\n\t\t\tend\n\n\t\t\tDateTime = os.time()\n\t\t\tDuration =  math.floor(((HeatingTable[self.Room].EndTimer - DateTime)/60) + 0.5)\t-- duration left rounded to the closest minute\n\t\t\tDurationString = setDurationString(Duration * 60, DateTime + (Duration * 60), HeatingTable[self.Room].Mode)\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\n\t\telseif HeatingTable[self.Room].Mode == 'Away' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Away: switching all systems to Away mode')\n\t\t\tend\n\t\t\t\n\t\t\tfor room = 1, getNumberOfRooms(HeatingTable) do\n\t\t\t\tif room ~= self.Room then\n\t\t\t\t\tif debug then\n\t\t\t\t\t\tself:debug('Switching room '..room..' to Away')\n\t\t\t\t\tend\n\t\t\t\t\tself:updateView(\"Export\", \"text\", 'Exporting Away mode to room '..room)\n\t\t\t\t\tHeatingTrigger[room].Mode = 'Away'\n\t\t\t\t\tHeatingTable[room].EndTimer = HeatingTable[self.Room].EndTimer + 60*room\t-- different delays to avoid all end interrupts at the same time\n\t\t\t\t\tHeatingTable[room].TargetAway = HeatingTable[self.Room].TargetAway\n\t\t\t\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n\t\t\t\t\tfibaro.sleep(1*1000)\n\t\t\t\tend\n\t\t\tend\n\t\t\tfibaro.setGlobalVariable('HEATING_TABLE', json.encode(HeatingTable))\n\n\t\t\tself:updateView(\"Export\", \"text\", ' ')\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = MODE_STRING_AWAY\n\n\t\t\tif HeatingTable[self.Room].Thermometer then\n\t\t\t\tTempTarget = HeatingTable[self.Room].TargetAway\n\t\t\t\tTargetString = 'Target:   '..string.format('%.1f', TempTarget)..' ºC'\n\t\t\telse\n\t\t\t\tTargetString = 'Hors gel'\n\t\t\tend\n\n\t\t\tDateTime = os.time()\n\t\t\tDurationString = setDurationString(HeatingTable[self.Room].EndTimer - DateTime, HeatingTable[self.Room].EndTimer, HeatingTable[self.Room].Mode)\n\t\t\t\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\n\t\telseif HeatingTable[self.Room].Mode == 'Off' then\n\t\t\tif debug then\n\t\t\t\tself:debug('Mode Off: switching all systems to Off mode')\n\t\t\tend\n\n\t\t\tfor room = 1, getNumberOfRooms(HeatingTable) do\n\t\t\t\tif room ~= self.Room then\n\t\t\t\t\tif debug then\n\t\t\t\t\t\tself:debug('Switching room '..room..' to Off')\n\t\t\t\t\tend\n\t\t\t\t\tself:updateView(\"Export\", \"text\", 'Exporting Off mode to room '..room)\n\t\t\t\t\tHeatingTrigger[room].Mode = 'Off'\n\t\t\t\t\tfibaro.setGlobalVariable('HEATING_TRIGGER', json.encode(HeatingTrigger))\n\t\t\t\t\tfibaro.sleep(1*1000)\n\t\t\t\tend\n\t\t\tend\n\t\t\tself:updateView(\"Export\", \"text\", ' ')\n\t\t\tself:updateView(\"Export\", \"text\", ' ')\n\n\t\t\t-- updates the VD UI variables\n\t\t\tModeString = self.MODE_STRING_OFF\n\t\t\tTargetString = ' '\n\t\t\tDurationString = ' '\n\n\t\t\t-- No need to update HeatingTable structure as there is no change\n\t\t\t\n\t\tend\n\n-----------------------------------------Unknown key!---------------------------------------------\n\telse \n\t\tif debug then\n\t\t\tself:debug('Unknown key requested')\n\t\tend\n\n\tend\n\n\t-------------------------------------Updating the VD display and Global Variable--------------------------------------------\n\n\tif debug then\n\t\tself:debug('Updating VD display and HEATING_DATA and HEATING_TRIGGER global variable')\n\tend\n\n\tif HeatingTable[self.Room].Thermometer then\n\t\tTempString = 'Temperature:   '..HeatingTable[self.Room].LastTemp..' °C'\n\telse\n\t\tTempString = ' '\n\tend\n\t\n    self:updateView(\"Temp\", \"text\", TempString)\n\tself:updateView(\"Mode\", \"text\", ModeString)\n    self:updateView(\"Target\", \"text\", TargetString)\n    self:updateView(\"Duration\", \"text\", DurationString)\n--    fibaro.emitCustomEvent(\"HVD\")\nend\n\n\nfunction QuickApp:testCall(value)\n\tself:debug(\"Function testCall. Value = \"..value)\nend"}]}